import { exec } from 'child_process';
import { promisify } from 'util';
import * as path from 'path';
import { getAiResponse } from './src/utils/network';
import { CliStyle } from './src/utils/cli-style';

const execAsync = promisify(exec);

interface GrepCommand {
  command: string;
  description: string;
}

interface CollectedContext {
  file: string;
  lines: string;
}

/**
 * 运行grep-agent：一个独立的AI代理，使用自我调用机制生成并执行grep命令来收集任务相关上下文。
 * @param task - 主任务描述（用户提示）。
 * @param maxIterations - 最大迭代次数，防止无限循环，默认3。
 * @param projectRoot - 项目根目录，默认使用process.cwd()。
 * @returns 收集到的上下文字符串，可直接追加到主提示中。
 */
export async function runGrepAgent(
  task: string,
  maxIterations: number = 3,
  projectRoot: string = process.cwd()
): Promise<string> {
  let currentContext = '';
  let iteration = 0;
  const contexts: CollectedContext[] = [];

  console.log(CliStyle.info('启动grep-agent：开始收集任务相关上下文...'));

  while (iteration < maxIterations) {
    iteration++;
    console.log(CliStyle.process(`grep-agent迭代 ${iteration}/${maxIterations}：生成grep命令...`));

    // AI提示：基于任务和当前上下文生成下一个grep命令
    const agentPrompt = `
You are a grep-agent. Your goal is to collect relevant code context for the main task: "${task}".

Current collected context summary: ${currentContext.substring(0, 500)}... (if any)

Generate 1-3 grep commands to search the project for relevant files/patterns.
Each command should be in the format: grep -r -n "pattern" path/to/search --include="*.ts,*.js" (limit to source files).
Focus on keywords, functions, or modules related to the task.

Respond ONLY with a JSON array of objects: [{"command": "grep ...", "description": "why this command"}]
Do not add extra text.
`;

    let grepCommands: GrepCommand[];
    try {
      const aiResponse = await getAiResponse(agentPrompt);
      grepCommands = JSON.parse(aiResponse) as GrepCommand[];
      if (!Array.isArray(grepCommands) || grepCommands.length === 0) {
        throw new Error('Invalid grep commands from AI');
      }
    } catch (error) {
      console.warn(CliStyle.warning(`AI生成grep命令失败（迭代${iteration}）：${error}`));
      break;
    }

    // 执行每个grep命令，收集上下文
    let newContexts: CollectedContext[] = [];
    for (const cmd of grepCommands) {
      console.log(CliStyle.info(`执行grep命令：${cmd.description}`));
      try {
        const { stdout, stderr } = await execAsync(cmd.command, { cwd: projectRoot, timeout: 30000, env: process.env });
        if (stderr) {
          console.warn(CliStyle.warning(`grep命令警告：${stderr.trim()}`));
        }
        if (stdout.trim()) {
          // 解析grep输出：假设格式 file:line:content
          const lines = stdout.trim().split('\n').map(line => {
            const match = line.match(/^([^:]+):(\d+):(.*)$/);
            if (match) {
              return { file: match[1], lines: match[3] };
            }
            return null;
          }).filter(Boolean) as CollectedContext[];

          newContexts = newContexts.concat(lines.slice(0, 10)); // 限制每个命令最多10行
        }
      } catch (execError) {
        console.warn(CliStyle.warning(`执行grep命令失败：${execError}`));
      }
    }

    // 更新上下文
    if (newContexts.length > 0) {
      contexts.push(...newContexts);
      currentContext = contexts.map(ctx => `File: ${path.relative(projectRoot, ctx.file)}\nLines: ${ctx.lines}\n---`).join('\n');
      console.log(CliStyle.success(`迭代${iteration}：收集到 ${newContexts.length} 个新上下文片段。`));
    } else {
      console.log(CliStyle.info(`迭代${iteration}：无新上下文。`));
    }

    // AI决定是否继续：如果上下文足够，停止
    const decidePrompt = `
Based on the task: "${task}"

Collected context:
${currentContext}

Is this context sufficient for the task? Respond with JSON: {"continue": false, "reason": "brief reason"}
If more context needed, {"continue": true, "reason": "what more to collect"}
`;

    try {
      const decideResponse = await getAiResponse(decidePrompt);
      const decision = JSON.parse(decideResponse) as { continue: boolean; reason: string; };
      console.log(CliStyle.info(`AI决策：${decision.reason}`));
      if (!decision.continue) {
        break;
      }
    } catch (error) {
      console.warn(CliStyle.warning(`决策AI失败，使用默认停止。`));
      break;
    }
  }

  const finalContext = contexts.length > 0
    ? `### Collected Context from grep-agent:\n${currentContext}\n\nUse this context to inform your actions.`
    : 'No additional context collected by grep-agent.';

  console.log(CliStyle.success('grep-agent完成：上下文收集结束。'));
  return finalContext;
}